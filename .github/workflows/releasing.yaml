name: Release Rust Application

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  release:
    name: Release for ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: linux-arm64
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            archive: linux-arm64-musl
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: darwin-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: darwin-x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: linux-x86_64-musl
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: windows-x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          override: true

      - name: Update version in Cargo.toml
        shell: bash
        run: |
          # Update the version in Cargo.toml to match release tag
          TAG_NAME="${{ github.event.release.tag_name }}"
          TAG_NAME="${TAG_NAME#v}"
          if [[ "${{ runner.os }}" == "macOS" ]]; then
              sed -i"" -e "s/^version = .*/version = \"$TAG_NAME\"/" Cargo.toml
          else
              sed -i -e "s/^version = .*/version = \"$TAG_NAME\"/" Cargo.toml
          fi
          echo "Updated version to: $TAG_NAME"

      - name: Build and upload release binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: github-authorized-secrets
          archive: $bin-$tag-${{ matrix.archive }}
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Images
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata and tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest

      - name: Download Linux binaries from release
        uses: duhow/download-github-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          tag: ${{ github.event.release.tag_name }}
          files: |
            *linux-x86_64-musl.tar.gz
            *linux-arm64-musl.tar.gz
          target: ./

      - name: Extract and prepare binaries for Docker build
        run: |
          # Extract x86_64 musl binary (statically linked)
          echo "Extracting x86_64 musl binary..."
          tar xzf github-authorized-secrets-${{ github.event.release.tag_name }}-linux-x86_64-musl.tar.gz
          mv github-authorized-secrets github-authorized-secrets-amd64
          chmod +x github-authorized-secrets-amd64

          # Extract ARM64 musl binary (statically linked)
          echo "Extracting ARM64 musl binary..."
          tar xzf github-authorized-secrets-${{ github.event.release.tag_name }}-linux-arm64-musl.tar.gz
          mv github-authorized-secrets github-authorized-secrets-arm64
          chmod +x github-authorized-secrets-arm64

          # Verify binaries were extracted successfully
          echo "Prepared binaries for Docker build:"
          ls -la github-authorized-secrets-*
          file github-authorized-secrets-*

          # Test binaries are executable
          echo "Testing binary executability:"
          ./github-authorized-secrets-amd64 --version || echo "amd64 binary test failed"
          ./github-authorized-secrets-arm64 --version || echo "arm64 binary test failed (expected on non-arm64 runner)"

      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
