name: Release Rust Application

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  release:
    name: Release for ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: linux-arm64
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: darwin-arm64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: darwin-x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: linux-x86_64-musl
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: windows-x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.88.0
          override: true

      - shell: bash
        run: |
          # Update the version in Cargo.toml
          TAG_NAME="${{ github.event.release.tag_name }}"
          TAG_NAME="${TAG_NAME#v}"
          if [[ "${{ runner.os }}" == "macOS" ]]; then
              sed -i"" -e "s/^version = .*/version = \"$TAG_NAME\"/" Cargo.toml
          else
              sed -i -e "s/^version = .*/version = \"$TAG_NAME\"/" Cargo.toml
          fi

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: github-authorized-secrets
          archive: $bin-$tag-${{ matrix.archive }}
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Images
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Wait for binaries and download
        run: |
          echo "Waiting for release binaries to be available..."
          sleep 30  # Give upload time to complete

          # Download the Linux x86_64 binary
          echo "Downloading x86_64 binary..."
          curl -L "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/github-authorized-secrets-${{ github.event.release.tag_name }}-linux-x86_64.tar.gz" | tar xz
          mv github-authorized-secrets github-authorized-secrets-amd64

          # Download the Linux ARM64 binary
          echo "Downloading arm64 binary..."
          curl -L "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/github-authorized-secrets-${{ github.event.release.tag_name }}-linux-arm64.tar.gz" | tar xz
          mv github-authorized-secrets github-authorized-secrets-arm64

          # Verify binaries
          ls -la github-authorized-secrets-*

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
